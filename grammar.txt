program     := {func_def}

statement   := var_dec | while_loop | expr | return_stmt
                    NOTE: statement must be FOLLOWED BY '\n' or EOF or ';'

func_def    := 'fn' IDENTIFIER '(' [parameters] ')' [VARTYPE] '{' {statement} '}'
parameters  := {VARTYPE IDENTIFIER ','} VARTYPE IDENTIFIER

var_decl    := VARTYPE IDENTIFIER '=' expr
while_loop  := 'while' '{' [statement]+ '}'

return_stmt     := 'ret' expr
expr            := assigment_expr
assigment_expr  := {logical_or_expr =} logical_or_expr
logical_or      := {logical_and or} logical_and
logical_and     := {eq_neq_expr and} eq_neq_expr
comparison_expr := {add_sub_expr !=,==} add_sub_expr
add_sub_expr    := {mul_div_expr (+-)} mul_div_expr
mul_div_expr    := {primary_expr (*/)} primary_expr
primary_expr    := atom | call_expr | '(' expr ')'
                          ^^^^^^^^^ will become call_and_index_expr

// call_and_index_expr  := IDENTIFIER { [ '(' [args] ')' ] { '[' [index]  ']' } }
call_expr   := IDENTIFIER [ '(' [args] ')' ]
args        := {arg ,} arg
atom        := IDENTIFIER | INT_LITERAL | STR_LITERAL