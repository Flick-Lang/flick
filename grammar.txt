program     := {func_def}

statement   := var_dec | while_loop | if_stmt | assignment_stmt | return_stmt | call
                    NOTE: statement must be FOLLOWED BY '\n' or EOF

func_def    := ['pub'] 'fn' IDENTIFIER '(' [parameters] ')' [VARTYPE] body
parameters  := {VARTYPE IDENTIFIER ','} VARTYPE IDENTIFIER

var_decl    := VARTYPE IDENTIFIER '=' expr
while_loop  := 'while' condition body

return_stmt := 'ret' expr

if_stmt     := 'if' condition body [else_stmt]

else_stmt   := 'else' body | 'else' if_stmt

condition   := expr
body        := '{' [statement]+ '}'

assigment   := IDENTIFIER = expr

expr             := logical_or
logical_or       := {logical_and or} logical_and
logical_and      := {eq_neq_expr and} eq_neq_expr
comparison_expr  := {add_sub_expr !=,==} add_sub_expr
add_sub_expr     := {mul_div_rem_expr (+-)} mul_div_rem_expr
mul_div_rem_expr := {primary_expr (*/%)} primary_expr
primary_expr     := atom | call | '(' expr ')'
                          ^^^^ will become call_and_index_expr

// call_and_index_expr  := IDENTIFIER { [ '(' [args] ')' ] { '[' [index]  ']' } }
call        := IDENTIFIER [ '(' [args] ')' ]
args        := {atom,} atom
atom        := IDENTIFIER | INT_LITERAL | STR_LITERAL | true | false
